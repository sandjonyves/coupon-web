const nodemailer = require('nodemailer');
require('dotenv').config();
// Email configuration
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  }
});

/**
 * Envoyer un email de confirmation pour un coupon
 * @param {string} email - Adresse email du destinataire
 * @param {number} couponId - ID du coupon cr√©√©
 */
const sendConfirmationEmail = async (email, couponId) => {
  try {
    // V√©rifier si l'email est configur√©
    if (!transporter.options.auth.user || transporter.options.auth.user === 'your-email@gmail.com') {
      console.log('Email not configured, skipping email send');
      return;
    }

    const mailOptions = {
      from: transporter.options.auth.user,
      to: email,
      subject: 'Confirmation de v√©rification de coupon - Platform Web Test',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 15px; text-align: center;">
            <h1 style="margin: 0; font-size: 24px;">Platform Web Test</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Confirmation de v√©rification de coupon</p>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 15px; margin-top: 20px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <h2 style="color: #333; margin-bottom: 20px;">‚úÖ Demande Confirm√©e</h2>
            
            <p style="color: #666; line-height: 1.6; margin-bottom: 20px;">
              Votre demande de v√©rification de coupon a √©t√© enregistr√©e avec succ√®s dans notre base de donn√©es.
            </p>
            
            <div style="background: #f8f9fa; border-left: 4px solid #007bff; padding: 15px; margin: 20px 0; border-radius: 5px;">
              <p style="margin: 0; color: #333; font-weight: bold;">Num√©ro de r√©f√©rence: <span style="color: #007bff;">#${couponId}</span></p>
            </div>
            
            <p style="color: #666; line-height: 1.6;">
              Notre √©quipe va traiter votre demande dans les plus brefs d√©lais. 
              Vous recevrez une notification d√®s que la v√©rification sera termin√©e.
            </p>
            
            <div style="background: #e8f5e8; border: 1px solid #28a745; border-radius: 10px; padding: 15px; margin: 20px 0;">
              <p style="margin: 0; color: #155724; font-size: 14px;">
                <strong>üí° Conseil:</strong> Conservez ce num√©ro de r√©f√©rence pour tout suivi ult√©rieur.
              </p>
            </div>
          </div>
          
          <div style="text-align: center; margin-top: 20px; color: #999; font-size: 12px;">
            <p>¬© 2025 Platform Web Test. Tous droits r√©serv√©s.</p>
            <p>Cette plateforme est disponible 24h/24 et 7j/7</p>
          </div>
        </div>
      `
    };

    await transporter.sendMail(mailOptions);
    console.log('Confirmation email sent to:', email);
  } catch (error) {
    console.error('Error sending email:', error);
    // Ne pas faire √©chouer la requ√™te si l'email √©choue
  }
};

/**
 * Envoyer un email de confirmation de r√©ception de coupon
 * @param {number} couponId - ID du coupon
 * @param {Object} couponData - Donn√©es du coupon (type, montant, devise, etc.)
 */
const sendCouponReceivedEmail = async (couponId, couponData) => {
  try {
    // V√©rifier si l'email est configur√©
    if (!transporter.options.auth.user || transporter.options.auth.user === 'your-email@gmail.com') {
      console.log('Email not configured, skipping coupon received email');
      return { success: false, message: 'Email service not configured' };
    }

    const mailOptions = {
      from: transporter.options.auth.user,
      to: couponData.email,
      subject: `Coupon re√ßu - Confirmation #${couponId} - Platform Web Test`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 15px; text-align: center;">
            <h1 style="margin: 0; font-size: 24px;">Platform Web Test</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Confirmation de r√©ception de coupon</p>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 15px; margin-top: 20px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <h2 style="color: #333; margin-bottom: 20px;">üéâ Coupon Re√ßu avec Succ√®s !</h2>
            
            <p style="color: #666; line-height: 1.6; margin-bottom: 20px;">
              Nous avons bien re√ßu votre coupon et nous vous confirmons qu'il a √©t√© enregistr√© dans notre syst√®me.
            </p>
            
            <div style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 10px; padding: 20px; margin: 20px 0;">
              <h3 style="color: #333; margin-top: 0; margin-bottom: 15px;">üìã D√©tails du Coupon</h3>
              
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 15px;">
                <div>
                  <strong style="color: #555;">Type:</strong>
                  <span style="color: #333; margin-left: 5px;">${couponData.type}</span>
                </div>
                <div>
                  <strong style="color: #555;">Montant:</strong>
                  <span style="color: #333; margin-left: 5px;">${couponData.montant} ${couponData.devise}</span>
                </div>
              </div>
              
              <div style="background: #e8f5e8; border-left: 4px solid #28a745; padding: 15px; border-radius: 5px;">
                <p style="margin: 0; color: #155724; font-weight: bold;">
                  Num√©ro de r√©f√©rence: <span style="color: #28a745;">#${couponId}</span>
                </p>
              </div>
            </div>
            
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 10px; padding: 15px; margin: 20px 0;">
              <p style="margin: 0; color: #856404; font-size: 14px;">
                <strong>‚è±Ô∏è Prochaines √©tapes:</strong> Notre √©quipe va maintenant proc√©der √† la v√©rification de votre coupon. 
                Vous recevrez une notification d√®s que le processus sera termin√©.
              </p>
            </div>
            
            <p style="color: #666; line-height: 1.6;">
              Merci de votre confiance. Nous traitons votre demande avec le plus grand soin.
            </p>
          </div>
          
          <div style="text-align: center; margin-top: 20px; color: #999; font-size: 12px;">
            <p>¬© 2025 Platform Web Test. Tous droits r√©serv√©s.</p>
            <p>Cette plateforme est disponible 24h/24 et 7j/7</p>
          </div>
        </div>
      `
    };

    await transporter.sendMail(mailOptions);
    console.log('Coupon received email sent to:', couponData.email);
    return { success: true, message: 'Email sent successfully' };
  } catch (error) {
    console.error('Error sending coupon received email:', error);
    return { success: false, message: 'Failed to send email', error: error.message };
  }
};

/**
 * Envoyer un email de notification de statut
 * @param {string} email - Adresse email du destinataire
 * @param {number} couponId - ID du coupon
 * @param {string} status - Nouveau statut (verified/invalid)
 */
const sendStatusNotificationEmail = async (email, couponId, status) => {
  try {
    // V√©rifier si l'email est configur√©
    if (!transporter.options.auth.user || transporter.options.auth.user === 'your-email@gmail.com') {
      console.log('Email not configured, skipping status notification');
      return;
    }

    const statusText = status === 'verified' ? 'V√©rifi√©' : 'Invalide';
    const statusColor = status === 'verified' ? '#28a745' : '#dc3545';
    const statusIcon = status === 'verified' ? '‚úÖ' : '‚ùå';

    const mailOptions = {
      from: transporter.options.auth.user,
      to: email,
      subject: `Mise √† jour de votre coupon #${couponId} - Platform Web Test`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 15px; text-align: center;">
            <h1 style="margin: 0; font-size: 24px;">Platform Web Test</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Mise √† jour de votre demande</p>
          </div>
          
          <div style="background: white; padding: 30px; border-radius: 15px; margin-top: 20px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <h2 style="color: #333; margin-bottom: 20px;">${statusIcon} Statut Mis √† Jour</h2>
            
            <p style="color: #666; line-height: 1.6; margin-bottom: 20px;">
              Votre demande de v√©rification de coupon a √©t√© trait√©e.
            </p>
            
            <div style="background: #f8f9fa; border-left: 4px solid ${statusColor}; padding: 15px; margin: 20px 0; border-radius: 5px;">
              <p style="margin: 0; color: #333; font-weight: bold;">
                Coupon #${couponId}: <span style="color: ${statusColor};">${statusText}</span>
              </p>
            </div>
            
            <p style="color: #666; line-height: 1.6;">
              ${status === 'verified' 
                ? 'Votre coupon a √©t√© v√©rifi√© avec succ√®s et est valide.' 
                : 'Votre coupon a √©t√© v√©rifi√© et s\'est av√©r√© invalide.'
              }
            </p>
          </div>
          
          <div style="text-align: center; margin-top: 20px; color: #999; font-size: 12px;">
            <p>¬© 2025 Platform Web Test. Tous droits r√©serv√©s.</p>
          </div>
        </div>
      `
    };

    await transporter.sendMail(mailOptions);
    console.log('Status notification email sent to:', email);
  } catch (error) {
    console.error('Error sending status notification email:', error);
  }
};

module.exports = {
  sendConfirmationEmail,
  sendCouponReceivedEmail,
  sendStatusNotificationEmail,
  transporter
}; 